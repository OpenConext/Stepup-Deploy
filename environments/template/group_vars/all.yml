# group_vars/all: Variables visible in all roles

# The "create_new_environment.sh" script generates a key in {{ inventory_dir }}/stepup-ansible-keystore
# You can move the keydir to another location. When you do, update vault_keydir below
# Location of the keystore directory on the deploy host
#vault_keydir: "~/stepup-staging-ansible-keystore"
vault_keydir: "{{ inventory_dir }}/stepup-ansible-keystore"


# Directory for keeping files on the remote host for use
# by the playbook
managed_file_dir: /opt/ansible/managed_files

# Timezone
# Format: IANA tz zone name (e.g. "Europe/Amsterdam")
# TODO: Set timezone
timezone: Europe/Amsterdam

# Administrative email address
# TODO: Set admin email address
server_admin_email: admin@stepup.example.com

# "noreply" email address
# This address is used as sender address for emails sent to users by by Stepup applications
# TODO: Set noreply address
noreply_email: noreply@stepup.example.com
noreply_email_name: Step-up Example

# FQDN for vhosts
# These are the hostnames for the stepup web applications.
#
# Your users will use (i.e. browse to):
# - selfservice_vhost_name - Stepup-SelfService (i.e. the SelfService web interface for registiring / revoking tokens)
# - ra_vhost_name - Stepup-RA (i.e., the web interface for registration authorities for vetting users and managing tokens)
#
# Your users will see (i.e. may be redirected to):
# - gateway_vhost_name - Stepup- Gateway (This is the Stepup SAML proxy, it will show the webinterface for SMS, Tiqr
#   and, when required, a WAYG)
# - tiqr_vhost_name - Stepup-Tiqr (The GSSP for Tiqr) (optional)
#
# REST interfaces (i.e. not visited using a webbrowser)
# - middleware_vhost_name - Stepup-Middleware
# - keyserver_vhost_name - Stepup-keyserver (optionally used by Tiqr)
#
# Changing vhost names after deployment requires manual steps. See docs/changing-vhost-after-deploy.md
# TODO: Set vhostnames
middleware_vhost_name: middleware.stepup.example.com
selfservice_vhost_name: selfservice.stepup.example.com
ra_vhost_name: ra.stepup.example.com
gateway_vhost_name: gateway.stepup.example.com
tiqr_vhost_name: tiqr.stepup.example.com
webauthn_vhost_name: webauthn.stepup.example.com
keyserver_vhost_name: keyserver.stepup.example.com
ssp_vhost_name: ssp.stepup.example.com # Used by the "dev" role only

# Domain for the locale cookie that is set by gateway, selfservice and ra and that is used to share the
# user's locale preference with other (stepup) components
# To allow this cookie to be shared between the component, all the component xxx_vhost_name's must be
# share the same domain
# TODO: Set cookie domain to match the vhostnames of the stepup applications
locale_cookie_domain: stepup.example.com

# The default locale for the stepup applications. Supported: nl_NL or en_GB
default_locale: en_GB

# Locales enabled in the stepup applications
# Supported locales: nl_NL and en_GB
enabled_locales:
  - nl_NL
  - en_GB


# The uri's that are used to define the LoA levels used in AuthnContextClassRef
# These are identifiers, use a namespace (domain) that you control.
# TODO: Set LoA uri's
stepup_uri_loa1: 'http://stepup.example.com/assurance/loa1'
stepup_uri_loa2: 'http://stepup.example.com/assurance/loa2'
stepup_uri_loa3: 'http://stepup.example.com/assurance/loa3'
# uri's used by the second factor only (SFO) endpoint
stepup_uri_sfo_loa2: 'http://stepup.example.com/assurance/sfo-level2'
stepup_uri_sfo_loa3: 'http://stepup.example.com/assurance/sfo-level3'

# The build in second factor types of the Stepup-Gateway to enable in the SS and the RA
# Format: comma separated list of factors to enable
# Supported factors: sms, yubikey
# TODO: Select second factors to enable
stepup_enabled_factors: sms, yubikey

# The generic second factor types to enable in the SS and the RA
# You can define new GSSPs here. Note that you will have to add configuration and translation for the new GSSP in
# several locations:
# - stepup-gateway.yml
# - stepup-ra.yml
# - stepup-selfservice.yml
# You can use the configuration for the "example_gssp" or the "tiqr" GSSPs as starting points for
# adding a new GSSP. You will need to provide translations for each to the locales listed under
# enabled_locales above
# Tip: search for "example_gssp" to see where you need to make changes.
# TODO: Select GSSPs to enable, and specify the LoA level to assign to the GSSP
# Available LoA levels: 2 and 3
stepup_enabled_generic_second_factors:
  tiqr:
    loa: 2
# example_gssp:
#   loa: 2


# Set the addres(ses) of the loadbalancer(s)
# These are the IP addresses for which the X-Forwarded-For HTTP header is honoured.
# Note: Specify the IP addresses of the loadbalancers themselves (i.e. what the nginx on the app servers will see at the
#       source IP address of the HTTP requests it receives)
# TODO: Set to the IP addres(ses) of the loadbalancer(s) that proxy the http requests to the app servers.
lb_addresses: []


# The (ip) address to use to access the mariadb database
# TODO: Set to loadbalanced / HA address of the database when using > 1 DB nodes
database_lb_address: "{{ hostvars[groups['dbcluster'][0]]['host_ipv4'] }}" # Use address of first db in the cluster


# The (ip) address to use to access the keyserver
# TODO: Set to loadbalanced / HA address of the keyserver when using > 1 keyservers
keyserver_lb_address: "{{ hostvars[groups['ks'][0]]['host_ipv4'] }}" # Use address of first ks


# The IP address of a remote loghost server to receive logs, or to false to disable sending logs from rsyslog
# The logs are sent from the local rsyslog on each host to a central log server using RELP over TCP.
# This is intended to be used with the manage and es roles. These two roles setup a ELK log server.
# Because the logs are sent unencrypted the network between all hosts and the remote log host must be trusted
# The rsyslog configuration is in the "common" role, in common/templaes/rsyslog/rsyslog.conf.j2
# TODO: Set to address and port of logserver
# The - no so readable - expression below set loghost_relp_address to the host_ipv4 for the first host in the manage group,
# or sets it to "false" if the manage group is empty
loghost_relp_address: "{{ (groups['manage'][0] | default(false)) | ternary(hostvars[groups['manage'][0]|default(inventory_hostname)]['host_ipv4'], false) }}"

# The port on the remote loghost to connect to. The manage role uses 10514 as the RELP port externally
loghost_relp_port: 10514


# rsyslog_remote_server is a second remote log server. Both loghost_relp_address and rsyslog_remote_server can be
# used independently. rsyslog_remote_server was added to support migration to a new logging infrastructure.
# Sent logs encrypted and mutually authenticated using RELP over TLS
# To enable uncomment rsyslog_remote_server, rsyslog_remote_port, rsyslog_certificate, rsyslog_ca_certificate and rsyslog_key below
# Note that the rsyslog_certificate, rsyslog_ca_certificate and rsyslog_key are not generated by create_new_environment.sh

# Hostname of the rsyslog remote host to connect to.
# The host must have a TLS server certificate that is issued by "rsyslog_ca_certificate"
#rsyslog_remote_server: syslog.stepup.example.com

# The port on the rsyslog_remote_server to connect to
#rsyslog_remote_port: 5140

# The X.509 TLS client certificate in PEM format for authenticiation to the rsyslog_remote_server.
# This certificate must be issued by rsyslog_ca_certificate
#rsyslog_certificate: "{{ lookup('file', inventory_dir+'/syslog_cert/rsyslogclient.crt') }}"

# The X.509 CA certificate in PEM format that issued the rsyslog_certificate and the server certificate of the rsyslog_remote_server
#rsyslog_ca_certificate: "{{ lookup('file', inventory_dir+'/syslog_cert/rsyslogclientca.crt') }}"

# The private key of the rsyslog_certificate TLS client certificate in PEM format
#rsyslog_key: "{{ lookup('file', inventory_dir+'/syslog_cert/rsyslogclient.key') }}"


# The (ip) address to use to access the memcache server
# The mencache server is used by Stepup-tiqr only. The db role installs a memcache
memcache_lb_address: "{{ hostvars[groups['dbcluster'][0]]['host_ipv4'] }}" # Use address of first db in the cluster


# Public SAML signing key of the SAML IdP
# This signing key is used for:
# - The IdP for normal (stepup-up) authentication with EntityID: "https://gateway_vhost_name/authentication/metadata"
# - The second factor only IdP with EntityID: "https://gateway_vhost_name/second-factor-only/metadata" (when enabled)
# This key is also used to sign the above metadata
# Private key in stepup-gateway.yml
# Format: PEM X.509 certificate
gateway_saml_idp_publickey: "{{ lookup('file', inventory_dir+'/saml_cert/gateway_saml_idp.crt') }}"

# Public SAML signing key of selfservice SP
# Private key in stepup-selfservice.yml
# Format: PEM X.509 certificate
selfservice_saml_sp_publickey: "{{ lookup('file', inventory_dir+'/saml_cert/selfservice_saml_sp.crt') }}"

# Public SAML signing key of RA SP
# Private key in stepup-ra.yml
# Format: PEM X.509 certificate
ra_saml_sp_publickey: "{{ lookup('file', inventory_dir+'/saml_cert/ra_saml_sp.crt') }}"

# Public SAML signing key of the GSSP Proxy IdP on the Stepup-Gateway
# This is the IdP for GSSP authentication on the gateway that is used by the SS and RA GSSP SP endpoints
# Private key in stepup-gateway.yml
# Format: PEM X.509 certificate
gateway_gssp_idp_publickey: "{{ lookup('file', inventory_dir+'/saml_cert/gateway_gssp_idp.crt') }}"


# Public SAML signing key of the Tiqr GSSP IDP
# Private key in stepup-tiqr.yml
# Format: PEM X.509 certificate
tiqr_idp_publickey: "{{ lookup('file', inventory_dir+'/saml_cert/tiqr_idp.crt') }}"

# Public SAML signing key of the Webauthn GSSP IDP
# Private key in stepup-webauthn.yml
# Format: PEM X.509 certificate
webauthn_idp_publickey: "{{ lookup('file', inventory_dir+'/saml_cert/webauthn_idp.crt') }}"


# Public SAML signing key of the "example_gssp" GSSP IDP
# Format: PEM X.509 certificate
#gssp_example_idp_publickey: "{{ lookup('file', inventory_dir+'/saml_cert/gssp_example_idp.crt') }}"


# Database tables and users for Stepup applications, keyserver
# Used by dbcluster role to create users and tables

# Used by stepup-middleware role to configure middleware
database_middleware_name: middleware
database_middleware_user: middleware
database_middleware_password: "{{ lookup('file', inventory_dir+'/password/database_middleware') }}"
database_middleware_deploy_user: middleware-deploy
database_middleware_deploy_password: "{{ lookup('file', inventory_dir+'/password/database_middleware_deploy') }}"
database_gateway_name: gateway
database_gateway_user: gateway
database_gateway_password: "{{ lookup('file', inventory_dir+'/password/database_gateway') }}"
database_gateway_deploy_user: gateway-deploy
database_gateway_deploy_password: "{{ lookup('file', inventory_dir+'/password/database_gateway_deploy') }}"


# Used by stepup-tiqr role to configure tiqr
database_tiqr_name: tiqr
database_tiqr_user: tiqr
database_tiqr_password: "{{ lookup('file', inventory_dir+'/password/database_tiqr') }}"
database_tiqr_deploy_user: tiqr-deploy
database_tiqr_deploy_password: "{{ lookup('file', inventory_dir+'/password/database_tiqr_deploy') }}"

# Used by stepup-keyserver role to configure keyserver
database_keyserver_name: keyserver
database_keyserver_user: keyserver
database_keyserver_password: "{{ lookup('file', inventory_dir+'/password/database_keyserver') }}"
database_keyserver_deploy_user: keyserver-deploy
database_keyserver_deploy_password: "{{ lookup('file', inventory_dir+'/password/database_keyserver_deploy') }}"
