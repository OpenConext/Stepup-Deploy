# Config for selfservice component

# Used for Symfony CSRF protection
selfservice_secret: "{{ lookup('file', inventory_dir+'/secret/selfservice') }}"


# URLs to the support documentation in the footer of the SS interface
# Format: yaml dictionary of locale: url
# TODO: Update links
ss_support_url:
    en_GB: "https://stepup.example.com/en_GB/ss_support_url"
    nl_NL: "https://stepup.example.com/nl_NL/ss_support_url"


# Public key is in all.yml
# Format: PEM RSA PRIVATE KEY
selfservice_saml_sp_privatekey: "{{ lookup('file', inventory_dir+'/saml_cert/selfservice_saml_sp.key') }}"


# Format: PEM RSA PRIVATE KEY (Vaulted)
selfservice_gssp_sp_privatekey: "{{ lookup('file', inventory_dir+'/saml_cert/selfservice_gssp_sp.key') }}"
# Used by selfservice to authenticate GSSP tokens to GSSP Proxy IdP on the gateway
# Authentication to the real GSSP is though the GSSP proxy on the Stepup-Gateway
# Format: PEM X.509 certificate
selfservice_gssp_sp_publickey: "{{ lookup('file', inventory_dir+'/saml_cert/selfservice_gssp_sp.crt') }}"


# GSSP Configuration

# "tiqr" GSSP
ss_gssp_tiqr_logo: /images/second-factor/tiqr.png
ss_gssp_tiqr_app_android_url: https://play.google.com/store/apps/details?id=org.tiqr.authenticator&hl=en
ss_gssp_tiqr_app_ios_url: https://itunes.apple.com/us/app/tiqr/id430838214?mt=8&ls=1

ss_gssp_tiqr_alt:
    en_GB: 'Tiqr'
    nl_NL: 'Tiqr'
ss_gssp_tiqr_title:
    en_GB: 'Tiqr'
    nl_NL: 'Tiqr'
ss_gssp_tiqr_description:
    en_GB: 'Log in with a smartphone app. For all smartphones with %%ios_link_start%%Apple iOS%%ios_link_end%% or %%android_link_start%%Android%%android_link_end%%.'
    nl_NL: 'Log in met een app op je smartphone. Geschikt voor smartphones met %%ios_link_start%%Apple iOS%%ios_link_end%% of %%android_link_start%%Android%%android_link_end%%.'
ss_gssp_tiqr_button_use:
    en_GB: 'Select'
    nl_NL: 'Selecteer'
ss_gssp_tiqr_initiate_title:
    en_GB: 'Register with Tiqr'
    nl_NL: 'Registreren bij Tiqr'
ss_gssp_tiqr_initiate_button:
    en_GB: 'Register with Tiqr'
    nl_NL: 'Registreer bij Tiqr'
ss_gssp_tiqr_explanation:
    en_GB: 'Click the button below to register with Tiqr.'
    nl_NL: 'Klik op de knop hieronder om je bij Tiqr te registreren.'
ss_gssp_tiqr_authn_failed:
    en_GB: 'Registration with Tiqr has failed. Please try again.'
    nl_NL: 'Registratie bij Tiqr is mislukt. Probeer het nogmaals.'
ss_gssp_tiqr_pop_failed:
    en_GB: 'Registration of your token failed. Please try again.'
    nl_NL: 'De registratie van uw token is mislukt. Probeer het nogmaals.'

# "webauthn" GSSP
ss_gssp_webauthn_logo: /images/second-factor/webauthn.png
ss_gssp_webauthn_app_android_url: ""
ss_gssp_webauthn_app_ios_url: ""

ss_gssp_webauthn_alt:
    en_GB: 'Webauthn'
    nl_NL: 'Webauthn'
ss_gssp_webauthn_title:
    en_GB: 'Webauthn'
    nl_NL: 'Webauthn'
ss_gssp_webauthn_description:
    en_GB: 'Log in using Webauthn. %%ios_link_start%% %%ios_link_end%% %%android_link_start%% %%android_link_end%%'
    nl_NL: 'Log in met een Webauthn. %%ios_link_start%% %%ios_link_end%% %%android_link_start%% %%android_link_end%%'
ss_gssp_webauthn_button_use:
    en_GB: 'Select'
    nl_NL: 'Selecteer'
ss_gssp_webauthn_initiate_title:
    en_GB: 'Register a Webauthn token'
    nl_NL: 'Registreer een Webauthn token'
ss_gssp_webauthn_initiate_button:
    en_GB: 'Register using Webauthn'
    nl_NL: 'Registreer met Webauthn'
ss_gssp_webauthn_explanation:
    en_GB: 'Click the button below to register a Webauthn token.'
    nl_NL: 'Klik op de knop hieronder een Webauthn token te registreren.'
ss_gssp_webauthn_authn_failed:
    en_GB: 'Registration using Webauthn has failed. Please try again.'
    nl_NL: 'Registratie met Webauthn is mislukt. Probeer het nogmaals.'
ss_gssp_webauthn_pop_failed:
    en_GB: 'Registration of your token failed. Please try again.'
    nl_NL: 'De registratie van uw token is mislukt. Probeer het nogmaals.'

# "azuremfa" GSSP
ss_gssp_azuremfa_logo: /images/second-factor/azuremfa.png
ss_gssp_azuremfa_app_android_url: "https://play.google.com/store/apps/details?id=com.azure.authenticator"
ss_gssp_azuremfa_app_ios_url: "https://apps.apple.com/nl/app/microsoft-authenticator/id983156458"

# Translations
ss_gssp_azuremfa_alt:
    en_GB: 'azuremfa'
    nl_NL: 'azuremfa'
ss_gssp_azuremfa_title:
    en_GB: 'azuremfa'
    nl_NL: 'azuremfa'
ss_gssp_azuremfa_description:
    en_GB: 'Log in with a smartphone app. For all smartphones with %%ios_link_start%%Apple iOS%%ios_link_end%% or %%android_link_start%%Android%%android_link_end%%.'
    nl_NL: 'Log in met een app op je smartphone. Geschikt voor smartphones met %%ios_link_start%%Apple iOS%%ios_link_end%% of %%android_link_start%%Android%%android_link_end%%.'
ss_gssp_azuremfa_button_use:
    en_GB: 'Select'
    nl_NL: 'Selecteer'
ss_gssp_azuremfa_initiate_title:
    en_GB: 'Register with azuremfa'
    nl_NL: 'Registreren bij azuremfa'
ss_gssp_azuremfa_initiate_button:
    en_GB: 'Register with azuremfa'
    nl_NL: 'Registreer bij azuremfa'
ss_gssp_azuremfa_explanation:
    en_GB: 'Click the button below to register with azuremfa.'
    nl_NL: 'Klik op de knop hieronder om je bij azuremfa te registreren.'
ss_gssp_azuremfa_authn_failed:
    en_GB: 'Registration with azuremfa has failed. Please try again.'
    nl_NL: 'Registratie bij azuremfa is mislukt. Probeer het nogmaals.'
ss_gssp_azuremfa_pop_failed:
    en_GB: 'Registration of your token failed. Please try again.'
    nl_NL: 'De registratie van uw token is mislukt. Probeer het nogmaals.'


# "example_gssp" GSSP
# Logo on the token selection page
#Add the new logo to files/stepup-app/images to make it available on the server
#ss_gssp_example_gssp_logo: /images/example-gssp.png

# Links to download the app for Android or IOS. See "ss_gssp_example_gssp_description" for how these are used
#ss_gssp_example_gssp_app_android_url: https://example.com/android
#ss_gssp_example_gssp_app_ios_url: https://example.com/ios

# Translations
#ss_gssp_example_gssp_alt:
#    en_GB: 'example_gssp'
#    nl_NL: 'example_gssp'
#ss_gssp_example_gssp_title:
#    en_GB: 'Example GSSP'
#    nl_NL: 'Voorbeeld GSSP'
#ss_gssp_example_gssp_description:
#    en_GB: 'Log in with the "Example GSSP" app. For all smartphones with %%ios_link_start%%Apple iOS%%ios_link_end%% or %%android_link_start%%Android%%android_link_end%%.'
#    nl_NL: 'Log in met de "Voorbeeld GSSP" app op je smartphone. Geschikt voor smartphones met %%ios_link_start%%Apple iOS%%ios_link_end%% of %%android_link_start%%Android%%android_link_end%%.'
#ss_gssp_example_gssp_button_use:
#    en_GB: 'Select'
#    nl_NL: 'Selecteer'
#ss_gssp_example_gssp_initiate_title:
#    en_GB: 'Register with Example GSSP'
#    nl_NL: 'Registreren bij de voorbeeld GSSP'
#ss_gssp_example_gssp_initiate_button:
#    en_GB: 'Register with Example GSSP'
#    nl_NL: 'Registreer bij de voorbeeld GSSP'
#ss_gssp_example_gssp_explanation:
#    en_GB: 'Click the button below to register with the Example GSSP.'
#    nl_NL: 'Klik op de knop hieronder om je bij ce voorbeeld GSSP te registreren.'
#ss_gssp_example_gssp_authn_failed:
#    en_GB: 'Registration with the Example GSSP has failed. Please try again.'
#    nl_NL: 'Registratie bij voorbeeld GSSP is mislukt. Probeer het nogmaals.'
#ss_gssp_example_gssp_pop_failed:
#    en_GB: 'Registration of your token failed. Please try again.'
#    nl_NL: 'De registratie van uw token is mislukt. Probeer het nogmaals.'


# SP for authentication to remote vetting IdPs
#     entityId: "https://{{ selfservice_vhost_name }}/rv/metadata"
#     assertionConsumerUrl: "https://{{ selfservice_vhost_name }}/second-factor/acs"
# Note: There is no metadata published at https://{{ selfservice_vhost_name }}/rv/metadata
#       TODO: (low-prio) fix entityID in code and make metadata availeble

# Format: PEM RSA PRIVATE KEY (Vaulted)
selfservice_remote_vetting_sp_privatekey: "{{ lookup('file', inventory_dir+'/saml_cert/remote_vetting_sp.key') }}"

# Configuration of Remote vetting IdPs
# These are the remote vetting methods a user can choose from
ss_remote_vetting_idps:
    ssp:
        name: "SimpleSAMLphp"
        logo: "/images/simplesaml.png"
        description:
            en_GB: "Local SimpleSAMLphp IdP"
            nl_NL: "Locale SimpleSAMLphp IdP"
        # Configuration of the Remote Vetting IdP
        entity_id: "https://{{ ssp_vhost_name }}/simplesamlphp/saml2/idp/metadata.php"
        sso_url: "https://{{ ssp_vhost_name }}/simplesamlphp/saml2/idp/SSOService.php"
        certificate: |
            {{ ssp_idp_publickey | indent(12, False) }}

        attribute_mapping:
            # remoteName: Name of the attribute as received from the IdP
            # localName: Name of the attribute in SelfService

            # Map of localName => remoteName e.g.:
            # localName1: remoteName1
            # localName2: remoteName2

            # localNames: commonName, mail, schacHomeOrganization
            # TODO: Need more local names. How to do this?
            # TODO: How to deal with local name descriptions for display purposes?
            # TODO: Deal with optional attributes
            commonName: urn:mace:dir:attribute-def:cn

    irma:
        name: "IRMA"
        logo: "/images/second-factor/irma.png"
        description:
            en_GB: "IRMA"
            nl_NL: "IRMA"
        # Configuration of the Remote Vetting IdP
        entity_id: "https://irma.vetting-poc.surfconext.nl/metadata"
        sso_url: "https://irma.vetting-poc.surfconext.nl/sso"
        certificate: |
          -----BEGIN CERTIFICATE-----
          MIICqjCCAZICCQDN8e1D1kTjczANBgkqhkiG9w0BAQsFADAXMRUwEwYDVQQDDAxT
          QU1MIHNpZ25pbmcwHhcNMTkwNzE4MTE0NjU5WhcNMjkwNzE1MTE0NjU5WjAXMRUw
          EwYDVQQDDAxTQU1MIHNpZ25pbmcwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
          AoIBAQDlUMCGmkE7SBw7wOEdXuqsfxldw9gHS1aAcyQ7uVQ09olFhDrYFSRfJJsR
          GUgLC9C8CXl6KtQRjfpKmnAjyWVzEk15OX9D6L8JHxFU/ySckwwbAf9eWw+A8IoA
          3EyDiQ5vouVSym/czgk6cjyaBtVr/MDLzHsOJPpOF3V69Olnyt9Q6GrEN1vT15oV
          K5ESKCMW+5XETRPt3TEFArrqEFA31PLFoOmKsyLtsIohmKB7QhuNbyCopLCUlYzw
          JsjFh6R5Q89NKMoBVhfYb2vP9BSDSFLa1vvBNcG6H9jWSioXh92pVUJj7q6tWDTz
          DIK8VQ/7ix/mKZW6H/ew7Ud6JEbRAgMBAAEwDQYJKoZIhvcNAQELBQADggEBAKPh
          uLSyXkjUe2OC8KLtFIa1ddpWYN/9GYdgetk9ek/siY+3XIzQCGHbaF0ySpXukiXC
          nNMW3s3ZfY2AUPVwxIs1HW4Iy+X/1Q+6wsDgaDRhasxaU7GbsIytOG+JBM2XNWAz
          ZhFgbgX5gmdGK5Wp/Avafb/V8vXKcu3fOx1RbI/CtM+pcLsI2IgDGLS2t8+nxzl9
          Ksh+M8hkq4PD6CghxraF7EOyXcf0p6fOQipYbL+mZfPaURgnHyff1Jk2sQ7PaNef
          ipu9+kKb6j+4sIRAPXjeRXtp2z9vcLEcDFVwh3FpONNdsAB6RVXx0UiMc/S8gvRc
          A9y5NkGB28R5tlU0VyA=
          -----END CERTIFICATE-----
        attribute_mapping:
            # remoteName: Name of the attribute as received from the IdP
            # localName: Name of the attribute in SelfService

            # Map of localName => remoteName e.g.:
            # localName1: remoteName1
            # localName2: remoteName2

            # localNames: commonName, mail, schacHomeOrganization
            # TODO: Need more local names. How to do this?
            # TODO: How to deal with local name descriptions for display purposes?
            # TODO: Deal with optional attributes
            commonName: urn:mace:dir:attribute-def:cn

# PEM X.509 certificate used for encrypting the match results that are written to disk
ss_encryption_public_key: "{{ lookup('file', inventory_dir+'/saml_cert/encryption.crt') }}"