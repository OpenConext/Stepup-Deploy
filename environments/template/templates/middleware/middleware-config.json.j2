{#
# This template is used to generate the middleware-config
#
# For more information see:
# https://github.com/OpenConext/Stepup-Middleware/blob/master/docs/MiddlewareConfiguration.md#using-the-middleware-configuration-api
#
# To apply changes made here you need to push a new middleware configuration to Stepup-Middleware component
# on an app server. There are two ways to do this:
# 1) Use the push-config.sh script in the Stepup-Deploy repo
# 2) Redeploy the Stepup-Middleware component using the deploy.sh script in the Stepup-Deploy repo and then
#    on the app sever execute /root/02-middleware-config.sh
#
# TODO: Define new service providers here
#}

{
{# Super RA Administrators
# Defined in group_vars/stepup-middleware.yml
#}
  "sraa": [
      {% for sraa in middleware_sraa %}"{{ sraa.nameid }}"{% if not loop.last %},{% endif %}

      {% endfor %}
  ],

{# Email templates #}
 {# Output the email template configuration. The format we are generating is JSON, so the syntax is strict.
     The email templates use Jinja2 syntax as well, but that is parsed by the middlware at runtime, not by Ansible.
     Because JSON requires strings to be in one line, we read them from separate files using Ansible file lookup so we
     can use newlines for readability.
  #}
  "email_templates": {
    {% for email_template in ('confirm_email', 'registration_code_with_ras', 'second_factor_verification_reminder_with_ras', 'registration_code_with_ra_locations', 'second_factor_verification_reminder_with_ra_locations', 'vetted', 'second_factor_revoked') %}
    "{{ email_template }}": {
      {% for locale in ('en_GB', 'nl_NL') %}
        "{{ locale }}": "{{ lookup('file', email_template + '_' + locale + '.j2') | replace('\"', '\\\"') | replace('\n',' ') | regex_replace(' +', ' ') }}"{% if not loop.last %}, {% endif %}
      {% endfor %}
    }{% if not loop.last %}, {% endif %}
    {% endfor %}
  },

  "gateway": {

  {# Service providers metadata and configuration #}
    "service_providers": [
    {# START SP DEFINITIONS #}
      {# The Stepup-RA SP
         Required to allow the RA to authenticate to the SA-GW #}
      {
        "entity_id": "https://{{ ra_vhost_name }}/authentication/metadata",
        "public_key": "{{ ra_saml_sp_publickey | depem }}",
        "acs": [
          "https://{{ ra_vhost_name }}/authentication/consume-assertion"
        ],
        "loa": {
          "__default__": "{{ stepup_uri_loa1 }}"
        },
        "assertion_encryption_enabled": false,
        "second_factor_only": false,
        "second_factor_only_nameid_patterns": [],
        "blacklisted_encryption_algorithms": []
      },
      {# The Stepup-SelfService SP
         Required to allow the SS to authenticate to the SA-GW #}
      {
        "entity_id": "https://{{ selfservice_vhost_name }}/authentication/metadata",
        "public_key": "{{ selfservice_saml_sp_publickey | depem }}",
        "acs": [
          "https://{{ selfservice_vhost_name }}/authentication/consume-assertion"
        ],
        "loa": {
          "__default__": "{{ stepup_uri_loa1 }}"
        },
        "assertion_encryption_enabled": false,
        "second_factor_only": false,
        "second_factor_only_nameid_patterns": [],
        "blacklisted_encryption_algorithms": []
      },

    {# START: GSSP SPs for SS and RA
       These entries are required for authentication and ragistration of GSSP tokens fromt the SP and
       RA interfaces. #}
{% for key, value in stepup_enabled_generic_second_factors.items() %}
      {
        "entity_id": "https://{{ selfservice_vhost_name }}/registration/gssf/{{ key }}/metadata",
        "public_key": "{{ selfservice_gssp_sp_publickey | depem }}",
        "acs": [
          "https://{{ selfservice_vhost_name }}/registration/gssf/{{ key }}/consume-assertion"
        ],
        "loa": {
          "__default__": "{{ stepup_uri_loa1 }}"
        },
        "assertion_encryption_enabled": false,
        "second_factor_only": false,
        "second_factor_only_nameid_patterns": [],
        "blacklisted_encryption_algorithms": []
      },
      {
       "entity_id": "https://{{ ra_vhost_name }}/vetting-procedure/gssf/{{ key }}/metadata",
        "public_key": "{{ ra_gssp_sp_publickey | depem }}",
        "acs": [
          "https://{{ ra_vhost_name }}/vetting-procedure/gssf/{{ key }}/verify"
        ],
        "loa": {
          "__default__": "{{ stepup_uri_loa1 }}"
        },
        "assertion_encryption_enabled": false,
        "second_factor_only": false,
        "second_factor_only_nameid_patterns": [],
        "blacklisted_encryption_algorithms": []
      },
{% endfor %}
      {# END: GSSP SPs for SS and RA #}

      {# Add additional SPs below #}

      {# SP definition Template
      {
        "entity_id": "",
        "public_key": "",
        "acs": [
          ""
        ],
        "loa": {
          "__default__": "{{ stepup_uri_loa1 }}"
        },
        "assertion_encryption_enabled": false,
        "second_factor_only": false,
        "second_factor_only_nameid_patterns": [],
        "blacklisted_encryption_algorithms": []
      },
      #}

      {% if 'dev' in group_names %}
      {# START: development SP definitions. #}
      {# A SP for testing normal authentication where the SP is free to choose the LoA it wants because
         the minimal LoA at the gateway is 1
         This SP has the non default SSP ACS location as the default (first) option.
         "default-sp"
      #}
      {
        "entity_id": "https://ssp.stepup.example.com/simplesamlphp/module.php/saml/sp/metadata.php/default-sp",
        "public_key": "{{ lookup('file', inventory_dir+'/saml_cert/simplesaml_sp.crt') | depem }}",
        "acs": [
          "https://ssp.stepup.example.com/module.php/DebugSP/sp/saml2-acs.php/default-sp",
          "https://ssp.stepup.example.com/module.php/saml/sp/saml2-acs.php/default-sp"
        ],
        "loa": {
          "__default__": "{{ stepup_uri_loa1 }}"
        },
        "assertion_encryption_enabled": false,
        "second_factor_only": false,
        "second_factor_only_nameid_patterns": [],
        "blacklisted_encryption_algorithms": []
      },

      {# A SP for testing second factor only (SFO) authentication
         Allows authentication for NameID patterns:
         - "urn:collab:person:stepup.example.com:admin"
         - "urn:collab:person:institution-a.example.com:*",
         - "urn:collab:person:Institution-D.EXAMPLE.COM:*"
         The default ACS is set to "https://ssp.stepup.example.com/module.php/DebugSP/sp/saml2-acs.php/second-sp"
         to allow testing with "ADFS" emulation. Multiple ACS locations are not fully supported in combination with
         SFO. See: https://www.pivotaltracker.com/story/show/157085628
         Note:
         - A normal SP and a SFO SP cannot have the same EnityID
         - Even though the SP must use the stepup_uri_level1 (i.e. level, not loa) identifier as AuthnContextClassRef
           the configuration here always uses loa.
        "second-sp"
      #}
      {
        "entity_id": "https://ssp.stepup.example.com/simplesamlphp/module.php/saml/sp/metadata.php/second-sp",
        "public_key": "{{ lookup('file', inventory_dir+'/saml_cert/simplesaml_sp.crt') | depem }}",
        "acs": [
          "https://ssp.stepup.example.com/module.php/DebugSP/sp/saml2-acs.php/second-sp"
        ],
        "loa": {
          "__default__": "{{ stepup_uri_loa1 }}"
        },
        "assertion_encryption_enabled": false,
        "second_factor_only": true,
        "second_factor_only_nameid_patterns": [
          "urn:collab:person:stepup.example.com:admin",
          "urn:collab:person:institution-a.example.com:*",
          "urn:collab:person:Institution-D.EXAMPLE.COM:*"
        ],
        "blacklisted_encryption_algorithms": []
      },
      {# A SP for testing normal authentication where the gateway enforces a minimal LoA of 2
         The SP can raisse the LoA to 3 using a RequestedAuthnConext, but it cannot lower it.
         "third-sp"
      #}
      {
        "entity_id": "https://ssp.stepup.example.com/simplesamlphp/module.php/saml/sp/metadata.php/third-sp",
        "public_key": "{{ lookup('file', inventory_dir+'/saml_cert/simplesaml_sp.crt') | depem }}",
        "acs": [
          "https://ssp.stepup.example.com/module.php/saml/sp/saml2-acs.php/third-sp"
        ],
        "loa": {
          "__default__": "{{ stepup_uri_loa2 }}"
        },
        "assertion_encryption_enabled": false,
        "second_factor_only": false,
        "second_factor_only_nameid_patterns": [],
        "blacklisted_encryption_algorithms": []
       },
       {# A SP for testing normal authentication where the gateway enforces a minimal LoA that depends on the
          institution that the user belongs to.
          A SP can raise the LoA to 3 using a RequestedAuthnConext, but it cannot lower it.
          Note:
          - To be ablte make the minimum required LoA determintation, the gateway need to either:
            - Know the user -- this required a *vetted* user because prior to vetting users are not know to the
              gateway. (When a user registers, the institution of the user is stored as well)
            - Receive the schacHomeOrganistaion attribute from the remote IdP
            Users for which the institutiion cannot be determined will be denied access.
          - "institution-d.example.com" is an institution for for which the test IdP is configured with mixed case
            SHO. It is listed lowecase here. Users from this institution will get a minimum LoA of 2, not 1.
          "fourth-sp"
        #}
      {
        "entity_id": "https://ssp.stepup.example.com/simplesamlphp/module.php/saml/sp/metadata.php/fourth-sp",
        "public_key": "{{ lookup('file', inventory_dir+'/saml_cert/simplesaml_sp.crt') | depem }}",
        "acs": [
          "https://ssp.stepup.example.com/module.php/saml/sp/saml2-acs.php/fourth-sp"
        ],
        "loa": {
          "__default__": "{{ stepup_uri_loa1 }}",
          "institution-a.example.com":  "{{ stepup_uri_loa2 }}",
          "institution-d.example.com":  "{{ stepup_uri_loa2 }}"
        },
        "assertion_encryption_enabled": false,
        "second_factor_only": false,
        "second_factor_only_nameid_patterns": [],
        "blacklisted_encryption_algorithms": []
      },
      {# END: development SP definitions. #}
      {% endif %}

      {# Add your own SPs here #}
      {
        "entity_id": "https://dummy-sp",
        "public_key": "MIICojCCAYoCCQD8o3774sHUMDANBgkqhkiG9w0BAQsFADATMREwDwYDVQQDDAhkdW1teS1zcDAeFw0xODEwMTcxMjA2NDhaFw0yMzEwMTYxMjA2NDhaMBMxETAPBgNVBAMMCGR1bW15LXNwMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3yzbWio94u8uqmc0yeyh1fOwl0L3PYfjhq3W1R++Cs6Cm3JzW5j7uuGZi71l0TNH1f2kPa9pcgQc0kBRmzn1Em5n1swMM589PEL2x49z4l6NeuRB3RPx69GOFBD0N5jcnoIQsGI0hQxX5gw8XOtRQrREAUQNTFmmWnzMoXkZMbJrpIuZSnHX3DWBdadooEDIkak29y+E+dKM9Za7rj/GT+uXJZJCY29CrIAUeltSdv00R8bB3BS3VQAexGxcAT+sfZyo7I9O6d/YVdDDePdTqGJ0GDOCoTBfhA+QDkHCh9yaF9NwAgIZVpVdLSx2KzVFAg9Ll2OHBTTWYd/bLfJZ3wIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQCvejcTBa15nmU6OQHUF7cozXbeUEUFE+ysCulAJA9L9JmukEd9FYLBmZDpYJ3YilQVAcsnuPHfFA47q/B0CxS28jWu87WcqdSUh87nqKjYISZJ1x+qa6JpLX2E6+bXWJuawOcL+t/9iOwr/jt1IQM+pVdxSkqbPalMu0j4C4eI7zwd+/cLrqkM+hXnPvRzD9A5hiPxM9KO+b9GitSAThe82PsnBMGg8xpWnUs+vDr3Vn047u1GbEWGDo/eMT/BO6/1sG44niL9/yzivIuwCBURAEyDjxtkErZ5q0zN35C6K9NALryD856rbhzuzOyftRERpsZ/pX9u6UbWNi9CfDEz",
        "acs": [
          "http://dummy-sp/acs"
        ],
        "loa": {
          "__default__": "{{ stepup_uri_loa1 }}"
        },
        "assertion_encryption_enabled": false,
        "second_factor_only": false,
        "second_factor_only_nameid_patterns": [],
        "blacklisted_encryption_algorithms": []
      }
      {# Note: no comma after last definition #}

    {# END SP DEFINITIONS #}
    ],

{# identity_providers
# This is an un(der-)developed feature
#}
    "identity_providers": [
    ]
  }
}