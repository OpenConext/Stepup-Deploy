# Add MariaDB repo and key
- name: Add MariaDB.org repository
  template: src='mariadb.repo.j2' dest='/etc/yum.repos.d/mariadb.repo'

- name: Copy MariaDB repository key
  copy: src=RPM-GPG-KEY-MariaDB dest={{ managed_file_dir }}/RPM-GPG-KEY-MariaDB

- name: Add MariaDB.org repository key
  rpm_key: state=present key={{ managed_file_dir }}/RPM-GPG-KEY-MariaDB


- name: Install MariaDB, Galera, rsync, MySQL-python
  yum:
    name:
      - MariaDB-Galera-server
      - MariaDB-client
      - galera
      - rsync         # For galera sync
      - MySQL-python  # Required for using the Ansible mysql_* modules
      - memcached
      - php-pecl-memcached
    state: installed

- name: Start and enable memcached
  service: name=memcached state=started enabled=true

- name: Put mariadb server.cnf
  template: src='server.cnf.j2' dest='/etc/my.cnf.d/server.cnf'
  notify:
    - restart mariadb

# MariaDB service from RedHat is called "mariadb", MariaDB service from MariaDB is called "mysql"
- name: Check whether DB is running
  command: /bin/systemctl status mysql
  ignore_errors: true
  register: status_result
  changed_when: False
  failed_when: status_result.rc >= 4
# status codes:
#0 program is running or service is OK
#1 program is dead and /var/run pid file exists
#2 program is dead and /var/lock lock file exists
#3 program is not running
#4 program or service status is unknown

- debug:
    msg: "Note: if no DB is running or reachable the next task takes a while to timeout. When it fails read the message about 'galera_bootstrap_node' to get the first DB node running"

- name: Start and enable the MariaDB (mysql) service on boot.
  service: name=mysql state=started enabled=true
  ignore_errors: true
  register: start_result

#- debug: var=status_result
#- debug: var=start_result
#- debug: var=galera_bootstrap_node
#- debug: var=inventory_hostname

- name: Fail with bootstrap hint when the DB was not running and failed to start
  fail:
      msg: |
           The database failed to start.
           If this is the first node in the database cluster that is started the node
           must be bootstrapped first. To do this run the playbook again with:
               ansible-playbook ... -e "galera_bootstrap_node={{ inventory_hostname }}"
  when: (status_result.rc != 0) and (start_result is failed) and (galera_bootstrap_node != inventory_hostname)

# Only bootstrap when galera_bootstrap_node allows us to bootsrap this node, and the node is not running
- name: Bootstrap first MariaDB server
  command: /sbin/service mysql bootstrap
  when: (status_result.rc != 0) and (start_result is failed) and (galera_bootstrap_node == inventory_hostname)

# Bootstrap database
# - Set root password
# - Remove anonymous users and test database
- name: Change mysql root password and remove test database
  script: mysql_bootstrap.sh "{{ mariadb_root_password | vault(vault_keydir) }}"
  register: db_bootstrap_result
  changed_when: db_bootstrap_result.rc > 0
  failed_when: db_bootstrap_result.rc >= 2

# Add cluster user
- name: add mariadb cluster user
  mysql_user:
    name: "{{ mariadb_cluster_user }}"
    password: "{{ mariadb_cluster_password | vault(vault_keydir) }}"
    login_user: root
    login_password: "{{ mariadb_root_password | vault(vault_keydir) }}"
    priv: "*.*:ALL PRIVILEGES/*.*:USAGE"
    state: present

# Add backup user
- name: add mariadb backup user
  mysql_user:
    name: "{{ mariadb_backup_user }}"
    password: "{{ mariadb_backup_password | vault(vault_keydir) }}"
    login_user: root
    login_password: "{{ mariadb_root_password | vault(vault_keydir) }}"
    priv: "*.*:SELECT"
    state: present
  when: mariadb_enable_remote_ssh_backup | default(false)

- name: Add "backup" shell user
  user: name=backup
  when: mariadb_enable_remote_ssh_backup | default(false)

- name: Put mariadb_backup script
  template: src='mariadb_backup.sh.j2' dest='/home/backup/mariadb_backup.sh' mode=500 owner=backup
  when: mariadb_enable_remote_ssh_backup | default(false)

- name:
  authorized_key:
    user: "{{ mariadb_backup_user }}"
    key: "{{ mariadb_backup_sshkey }}"
    key_options: command="/home/backup/mariadb_backup.sh"
  when: mariadb_enable_remote_ssh_backup | default(false)


- include: middleware.yml
- include: gateway.yml
- include: tiqr.yml
- include: keyserver.yml
