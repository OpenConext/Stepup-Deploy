- name: Add MariaDB.org repository
  template: src='mariadb.repo.j2' dest='/etc/yum.repos.d/mariadb.repo'

- name: Add MariaDB.org repository key
  rpm_key: state=present key=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB


- name: Install RPMs
  yum: name={{item}} state=installed
  with_items:
  - MariaDB-Galera-server
  - MariaDB-client
  - galera
  - rsync         # For galera sync
  - MySQL-python  # Required for using the Ansible mysql_* modules


# Note: Won't work with "--limit=<hostname>" because the facts of the other hosts will be missing
# fatal: [<hostname>] => {'msg': "AnsibleUndefinedVariable: One or more undefined variables: 'dict object' has no attribute 'ansible_default_ipv4'", 'failed': True}
- name: Put mariadb server.cnf
  action: template src='server.cnf.j2' dest='/etc/my.cnf.d/server.cnf'
  notify:
    - restart mariadb

# MariaDB service from RedHat is called "mariadb", MariaDB service from MariaDB is called "mysql"
- name: Check whether DB is running
  command: /sbin/service mysql status
  ignore_errors: true
  register: status_result
# status codes:
#0 program is running or service is OK
#1 program is dead and /var/run pid file exists
#2 program is dead and /var/lock lock file exists
#3 program is not running
#4 program or service status is unknown

- name: Start and enable the MariaDB (mysql) service on boot
  service: name=mysql state=started enabled=true
  ignore_errors: true
  register: start_result

#- debug: var=status_result
#- debug: var=start_result
#- debug: var=galera_bootstrap_node
#- debug: var=inventory_hostname

- name: Fail with bootstrap hint when the DB was not running and failed to start
  fail:
      msg: |
           The database failed to start.
           If this is the first node in the database cluster that is started the node
           must be bootstrapped first. To do this run the playbook again with:
               ansible-playbook ... -e "galera_bootstrap_node={{ inventory_hostname }}"
  when: (status_result.rc != 0) and (start_result|failed) and (galera_bootstrap_node != inventory_hostname)

# Only bootstrap when galera_bootstrap_node allows us to bootsrap this node, and the node is not running
- name: Bootstrap Galera node
  command: /sbin/service mysql bootstrap
  when: (status_result.rc != 0) and (start_result|failed) and (galera_bootstrap_node == inventory_hostname)

# Bootstrap database
# - Set root password
# - Remove anonymous users and test database
- name: Bootstrap mysql database
  script: mysql_bootstrap.sh "{{ mariadb_root_password | vault }}"


# Add cluster user
- name: add mariadb cluster user
  mysql_user:
    name: "{{ mariadb_cluster_user }}"
    password: "{{ mariadb_cluster_password | vault }}"
    login_user: root
    login_password: "{{ mariadb_root_password | vault }}"
    priv: "*.*:ALL PRIVILEGES/*.*:USAGE"
    state: present