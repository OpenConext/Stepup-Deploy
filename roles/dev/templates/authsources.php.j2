<?php

// THIS FILE IS MANAGED BY ANSIBLE

# accountgen is used to add exampleauth:UserPass accounts in bulk.
# See definitions at the end of this file

include_once('accountgen.inc');

$config = array(

    // This is a authentication source which handles admin authentication.
    'admin' => array(
        // The default is to use core:AdminPassword, but it can be replaced with
        // any authentication source.

        'core:AdminPassword',
    ),


    // An authentication source which can authenticate against both SAML 2.0
    // and Shibboleth 1.3 IdPs.
    'default-sp' => array(
        'saml:SP',

        // The entity ID of this SP.
        // Can be NULL/unset, in which case an entity ID is generated based on the metadata URL.
        'entityID' => 'https://{{ ssp_vhost_name }}/simplesamlphp/module.php/saml/sp/metadata.php/default-sp',

        // The entity ID of the IdP this should SP should contact.
        // Can be NULL/unset, in which case the user will be shown a list of available IdPs.
        'idp' => NULL,

        // The URL to the discovery service.
        // Can be NULL/unset, in which case a builtin discovery service will be used.
        'discoURL' => NULL,

        'certificate' => 'sp.crt',
        'privatekey' => 'sp.key',
        // See end of file for request.sign and signature alg config!
    ),
    'second-sp' => array(
        'saml:SP',

        // The entity ID of this SP.
        // Can be NULL/unset, in which case an entity ID is generated based on the metadata URL.
        'entityID' => 'https://{{ ssp_vhost_name }}/simplesamlphp/module.php/saml/sp/metadata.php/second-sp',

        // The entity ID of the IdP this should SP should contact.
        // Can be NULL/unset, in which case the user will be shown a list of available IdPs.
        'idp' => NULL,

        // The URL to the discovery service.
        // Can be NULL/unset, in which case a builtin discovery service will be used.
        'discoURL' => NULL,

        'certificate' => 'sp.crt',
        'privatekey' => 'sp.key',
        //'redirect.sign' => TRUE,
        //'signature.algorithm' => 'http://www.w3.org/2001/04/xmldsig-more#rsa-sha256',
    ),


    /*
    'example-sql' => array(
        'sqlauth:SQL',
        'dsn' => 'pgsql:host=sql.example.org;port=5432;dbname=simplesaml',
        'username' => 'simplesaml',
        'password' => 'secretpassword',
        'query' => 'SELECT "username", "name", "email" FROM "users" WHERE "username" = :username AND "password" = :password',
    ),
    */

    /*
    'example-static' => array(
        'exampleauth:Static',
        'uid' => array('testuser'),
        'eduPersonAffiliation' => array('member', 'employee'),
        'cn' => array('Test User'),
    ),
    */

// Accounts for accountgen script
// Allows read email addresses to be used for multiple accounts
// The accountsgen scrip mangles the email address to e.g. joe+slug@stepup.example.com
$accounts=array(
    // username => email (this can be a real email address)
    'joe' =>  'joe@stepup.example.com',
    'jane' => 'jane@stepup.example.com',
);

// List of varieties of account to generate
$slugs=array(
    "1", "2", "3", "4", "5", "sms", "-yk", "-tiqr", "-u2f", "-bio", "-ra", "-raa"
);

// for a username 'joe' this will generate joe-a1, joe-a2, ..., joe-a-yk, ... joe-a-raa
// for a username 'joe' this will generate joe-b1, joe-b2, ..., joe-b-yk, ... joe-b-raa
// ...
// For all accounts the username is equal to the password. E.g. "joe-a1" / "joe-a1"
foreach ($accounts as $user => $email) {
    //                   username   , email,  schachomeorganization
    account_gen($config, "${user}-a", $email, 'institution-a.nl', $slugs);
    account_gen($config, "${user}-b", $email, 'institution-b.nl', $slugs);
    account_gen($config, "${user}-c", $email, 'institution-c.nl', $slugs);
}


// Hack to change the configuration of the hosted SPs "default-sp" and "second-sp" using global vars from the
// SP test web form
$config['default-sp']['redirect.sign'] = $GLOBALS['gSP_redirect_sign'] ? TRUE : FALSE;
$config['second-sp']['redirect.sign'] = $GLOBALS['gSP_redirect_sign'] ? TRUE : FALSE;
if ( isset($GLOBALS['gSP_signature_algorithm']) && strlen($GLOBALS['gSP_signature_algorithm']) > 0 ) {
    $config['default-sp']['signature.algorithm'] = $GLOBALS['gSP_signature_algorithm'];
    $config['second-sp']['signature.algorithm'] = $GLOBALS['gSP_signature_algorithm'];
}
if ( isset($GLOBALS['gSP_secondary_key']) && $GLOBALS['gSP_secondary_key']) {
    $config['default-sp']['certificate']='sp2.crt';
    $config['default-sp']['privatekey']='sp2.key';
    $config['second-sp']['certificate']='sp2.crt';
    $config['second-sp']['privatekey']='sp2.key';
}

if ( isset($GLOBALS['gSP_ProtocolBinding']) ) {
    $config['default-sp']['ProtocolBinding'] = $GLOBALS['gSP_ProtocolBinding'];
    $config['second-sp']['ProtocolBinding'] = $GLOBALS['gSP_ProtocolBinding'];
}