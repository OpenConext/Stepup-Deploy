- name: Install Pacemaker / Corosync
  yum: name={{ item }} state=present
  with_items:
    - pcs
    - pacemaker
    - corosync

- name: Enable and start pcsd
  service: name=pcsd state=started enabled=yes

- name: Setup hacluster user
  user: name={{ lb_pacemaker_user }} state=present password={{ lb_pacemaker_user_crypt | vault(vault_keydir) }}

- name: Check current cluster
  command: pcs cluster status
  ignore_errors: yes
  register: pcs_cluster_status

- name: pcs cluster auth
  command: pcs cluster auth {{ groups['lb']|join(" ") }} -u {{ lb_pacemaker_user }} -p {{ lb_pacemaker_user_password | vault(vault_keydir) }}
  register: pcs_cluster_auth

- name: pcs cluster setup
  command: pcs cluster setup --name {{ lb_pacemaker_cluster_name }} {{ groups['lb']|join(" ") }}
  when: pcs_cluster_status|failed

- name: pcs cluster start
  command: pcs cluster start --all

- name: pcs cluster enable
  command: pcs cluster enable --all

- name: Setup stonith-enabled
  command: pcs property set stonith-enabled={{ lb_pacemaker_stonith_enabled }}

- name: Setup no-quorum-policy
  command: pcs property set no-quorum-policy={{ lb_pacemaker_quorum_policy }}

- name: Get resource status
  command: pcs resource show
  register: resource_status

- name: Configure resource
  command: pcs resource create {{ item.name }} ocf:heartbeat:IPaddr2 ip={{ item.ip }} cidr_netmask={{ item.cidr }} op monitor interval=30s
  with_items: "{{ pacemaker }}"
  when: "item.name not in resource_status.stdout"

- name: Constrain resource
  command: pcs constraint location {{ item.name }} prefers {{ groups['lb'][0] }}=INFINITY
  with_items: "{{ pacemaker }}"
