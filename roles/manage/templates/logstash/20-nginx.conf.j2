filter {

  # Handle nginx error log
  # Errors can span multiple lines. Example:
  # 2015/07/11 13:11:13 [error] 1542#0: *85 FastCGI sent in stderr: "PHP ...
  # Stack trace:
  # #0 /opt/stepup/Stepup-Gateway-1.0.1-2015062308 ...
  # #1 /opt/stepup/Stepup-Gateway-1.0.1-2015062308 ...

  if [prog] =~ /^nginx-error*/ {

    # (Try) to group messages split over multiple lines in one line again
    multiline {
      # Pattern matches the start of a new log message
      pattern => "^[0-9]{4}/[0-9]{2}/[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2} \["
      what => "previous"
      negate => true
    }

    # Multline may turn timestamp fields into an array
    # Fix this by setting those fields to the first value
    if "multiline" in [tags] {
      mutate {
        replace => [ "syslog_timestamp", "%{[syslog_timestamp][0]}" ]
      }
    }

    # Get "YYYY/MM/dd HH:mm:ss" formatted timestamp and severity and replace the message
    grok {
      match => { message => "(?m)(?<nginx_timestamp>[0-9]{4}/[0-9]{2}/[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}) \[%{DATA:nginx_severity}\] %{NUMBER:nginx_pid:int}#%{NUMBER:nginx_tid:int}:( \*%{INT:nginx_cid:int})? %{GREEDYDATA:message}" }
      overwrite => [ "message" ]
    }

    # Parse nginx_timestamp into generated_at
    date {
      match => [ "nginx_timestamp", "YYYY/MM/dd HH:mm:ss" ]
      target => "generated_at"
    }

  }


  # Handle nginx access log
  # Format:
  # $remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" "$request_time"
  #

  if [prog] =~ /^nginx-access*/ {

    grok {
      match => { message => '%{NOTSPACE:remote_addr} - %{USER:remote_user} \[%{DATA:nginx_timestamp}\] "%{DATA:http_request}" %{NUMBER:http_status:int} %{NUMBER:bytes_sent:int} "%{DATA:http_referer}" "%{DATA:http_user_agent}" "%{NUMBER:request_time:float}" %{NOTSPACE:stepup_request_id}' }
    }

    # 'if's with undefined variables can crash the logstash pipeline, leading to an unresponsive logstash.
    if "_grokparsefailure" not in [tags] {

      # Parse nginx_timestamp into generated_at
      # Example: 11/Jul/2015:14:15:56Â·+0200
      date {
        match => [ "nginx_timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
        target => "generated_at"
      }

      # Assign severity based on HTTP status code
      if [http_status] >= 400 and [http_status] < 500 {
        mutate {
          replace => { "severity" => "warning" }
        }
      }
      if [http_status] >= 500 and [http_status] < 600 {
        mutate {
          replace => { "severity" => "error" }
        }
      }
    }

    if [http_user_agent] {
      useragent {
        source => "http_user_agent"
        target => "user_agent"
      }
    }

  }

  # Non standard nginx_timestamp format causes parser trouble in ES
  mutate {
    remove_field => "nginx_timestamp"
  }

}