server {
    # Listen to 433 both IPv4 and IPv6
    listen 443;
    listen [::]:443;
    server_name {{ vhost_name }};

    ssl on;
    ssl_certificate     /etc/nginx/proxy_{{ component_name }}.crt;
    ssl_certificate_key /etc/nginx/proxy_{{ component_name }}.key;

    ssl_session_timeout  60m;
    ssl_session_cache    shared:SSL:10m;

    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES128-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA;
    ssl_prefer_server_ciphers on;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

    ssl_ecdh_curve secp384r1;
    ssl_dhparam /etc/nginx/dhparams.pem;

    add_header Strict-Transport-Security max-age=31556952;

    access_log /var/log/nginx/proxy_{{ component_name }}_access.log;
    error_log /var/log/nginx/proxy_{{ component_name }}_error.log;

    location ~ {
        # By default nginx replaces the Host header with $proxy_host. This the value of
        # proxy_pass (i.e. localhost:80). We need to keep the real hostname here.
        proxy_set_header    Host            $host;

        # Set cookie to samesite=none
        proxy_cookie_path ~(/*) "/; secure; HttpOnly; SameSite=none";

        # Append the client IP to the X-Forwarded-For header. This header is later used
        # by the nginx vhost to get the real client IP, just like when using a separate reverse
        # proxy (i.e. haproxy on the host)
        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;

        # Clear "Proxy" header
        proxy_set_header    Proxy "";

        # Forward to localhost (HTTP)
        proxy_pass          http://localhost:80;
        proxy_read_timeout  90;
    }
}
