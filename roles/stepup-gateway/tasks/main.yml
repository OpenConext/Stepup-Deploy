# Install gateway component

- name: Put parameters and samlstepupproviders(_parameters) and global_view_parameters YAML config
  template:
    src: "{{ item }}.yml.j2"
    dest: "{{ component_config_dir_name }}/{{ item }}.{{ component_config_yaml_extension }}"
    mode: "{{ component_mode_640 }}"
    group: "{{ component_group }}"
  with_items:
  - parameters
  - samlstepupproviders
  - samlstepupproviders_parameters
  - global_view_parameters

- name: Put .env file
  template:
    src: env.j2
    dest: "{{ component_dir_name }}/.env.local"
    group: "{{ component_group }}"
    mode: "{{ component_mode_640 }}"
  when: deploy_symfony_4

# Deploy does change file rsystem ights, so run deploy first, then write files
- name: Deploy Symfony component
  include_role:
    name: deploy
    tasks_from: deploy

#symfony 3 locations
- name: Put images from <env>/files/stepup-app into web/images
  copy: src={{ item }} dest={{ component_dir_name }}/web/images mode=444 group={{ component_group }}
  with_fileglob:
  - "{{inventory_dir }}/files/stepup-app/images/*"
  when: deploy_symfony_3

- name: Put images from <env>/files/stepup-app/second-factor into web/images/second-factor
  copy: src={{ item }} dest={{ component_dir_name }}/web/images/second-factor mode={{ component_mode_444 }} group={{ component_group }}
  with_fileglob:
  - "{{inventory_dir }}/files/stepup-app/images/second-factor/*"
  when: deploy_symfony_3

#symfony 4 locations
- name: Put images from <env>/files/stepup-app into public/images
  copy: src={{ item }} dest={{ component_dir_name }}/public/images mode=444 group={{ component_group }}
  with_fileglob:
  - "{{inventory_dir }}/files/stepup-app/images/*"
  when: deploy_symfony_4

- name: Put images from <env>/files/stepup-app/second-factor into public/images/second-factor
  copy: src={{ item }} dest={{ component_dir_name }}/public/images/second-factor mode={{ component_mode_444 }} group={{ component_group }}
  with_fileglob:
  - "{{inventory_dir }}/files/stepup-app/images/second-factor/*"
  when: deploy_symfony_4

# Write the SAML certificates and the corresponding private keys of the gateway
# The Gateway is a SAML proxy that has multiple IdP and SP Entities

# The "SAML" IdP and SP certificates are used for the normal (stepup-up) authentication and for the
# second factor only (SFO) IdP

# The "GSSP" IdP and SP certificates are used for proxying GSSP authentications

# Currently the same certificates are used for signing the SAML metadata for all the endpoints as for
# signing the SAML Responses from the corresponding entity

- name: Write SAML SP private key
  copy: content="{{ gateway_saml_sp_privatekey | vault(vault_keydir) }}" dest={{ component_config_file_dir_name }}/sp.key owner={{ component_owner }} mode={{ component_mode_400 }}

- name: Write SAML SP certificate
  copy: content="{{ gateway_saml_sp_publickey }}" dest={{ component_config_file_dir_name }}/sp.crt group={{ component_group }} mode={{ component_mode_640 }}


- name: Write GSSP SP private key
  copy: content="{{ gateway_gssp_sp_privatekey | vault(vault_keydir)  }}" dest={{ component_config_file_dir_name }}/sp_gssp.key owner={{ component_owner }} mode={{ component_mode_400 }}

- name: Write GSSP SP certificate
  copy: content="{{ gateway_gssp_sp_publickey }}" dest={{ component_config_file_dir_name }}/sp_gssp.crt  group={{ component_group }} mode={{ component_mode_640 }}


- name: Write SAML IdP private key
  copy: content="{{ gateway_saml_idp_privatekey | vault(vault_keydir)  }}" dest={{ component_config_file_dir_name }}/idp.key owner={{ component_owner }} mode={{ component_mode_400 }}

- name: Write SAML IdP certificate
  copy: content="{{ gateway_saml_idp_publickey }}" dest={{ component_config_file_dir_name }}//idp.crt group={{ component_group }} mode={{ component_mode_640 }}


- name: Write GSSP IdP private key
  copy: content="{{ gateway_gssp_idp_privatekey | vault(vault_keydir) }}" dest={{ component_config_file_dir_name }}/idp_gssp.key owner={{ component_owner }} mode={{ component_mode_400 }}

- name: Write GSSP IdP certificate
  copy: content="{{ gateway_gssp_idp_publickey }}" dest={{ component_config_file_dir_name }}/idp_gssp.crt group={{ component_group }} mode={{ component_mode_640 }}


# U2F support for facets:
- name: Set U2F app-id directory rights
  file: path={{ component_dir_name }}/web/u2f state=directory group={{ component_group }} mode={{ component_mode_755 }}

- name: Put facet ids
  template: src=app-id.json.j2 dest={{ component_dir_name }}/web/u2f/app-id group={{ component_group }} mode={{ component_mode_644 }}


- name: Put gateway database db_migrate scripts in /root/
  template: src={{ item }}.j2 dest=/root/{{ item }} group=root owner=root mode="500"
  with_items:
  - "01-gateway-db_migrate.sh"

- name: Activate gateway component
  include_role:
    name: deploy
    tasks_from: activate

# include ../../deploy/cleanup.yml
- name: Clean old releases
  include_role:
    name: deploy
    tasks_from: cleanup

- name: Show database configuration hint
  debug:
    msg: "Note: Database initialisation/migration must be run manually once. Run '/root/01-gateway-db_migrate.sh' on an app server."
