# Infra suff for middleware

- name: Get active component
  shell: readlink /opt/www/{{ middleware_vhost_name }}
  ignore_errors: true
  register: active_component

- debug:
    msg: "Currently installed component: {{ active_component.stdout }}; Component to be installed: {{ component_dir_name }}; Asset version: {{ stable_nonce }}"

- name: Check whether component is installed
  fail: msg="Component already active"
  when: ( 0 ) and ( component_dir_name != active_component.stdout)

- name: Create stepup directory
  file: path={{ component_dir_name }} group={{ component_name }} state=directory mode=775

- name: Untar component
  unarchive: copy=yes src={{ component_tarball_name }} dest={{ component_dir_name }} group={{ component_name }}
  when: component_unarchive | bool | default(true)

- name: Remove group and world write
  file: dest={{ component_dir_name }} group={{ component_name }} recurse=yes mode="g-w,o-w"

- name: Put parameters.yml
  template: src=parameters.yml.j2 dest={{ component_dir_name }}/app/config/parameters.yml mode=640 group={{ component_name }}

- name: assets:install
  command: php app/console assets:install --symlink --env=prod --no-debug
  args:
      chdir: "{{ component_dir_name }}"

- name: Clear cache
  command: php app/console cache:clear --env=prod --no-debug
  args:
      chdir: "{{ component_dir_name }}"

- name: Restrict app dir to the application
  file: path={{item}} group={{ component_name }} mode="o=" recurse=yes
  with_items:
  - "{{ component_dir_name }}/app"

- name: Grant app write access to cache and log dirs
  file: path={{item}} group={{ component_name }} mode=770 recurse=yes
  with_items:
  - "{{ component_dir_name }}/app/cache"
  - "{{ component_dir_name }}/app/logs"

- name: Put middleware configuration scripts in /root/
  template: src={{ item }}.j2 dest=/root/{{ item }} group=root owner=root mode="500"
  with_items:
  - "01-middleware-db_migrate.sh"
  - "06-middleware-bootstrap-sraa-users.sh"

- name: Put middleware config from environment in /opt/scripts
  template: src={{ inventory_dir }}/templates/middleware/{{ item }}.j2 dest=/opt/scripts/{{ item }} group={{ app_deploy_user }} owner={{ app_deploy_user }} mode="400"
  with_items:
  - "middleware-config.json"
  - "middleware-whitelist.json"
  - "middleware-institution.json"

- name: Put middleware configuration scripts in /opt/scripts
  template: src={{ item}}.j2 dest=/opt/scripts/{{ item }} group={{ app_deploy_user }} owner=root mode=550
  with_items:
  - "middleware-push-config.sh"
  - "middleware-push-whitelist.sh"
  - "middleware-push-institution.sh"


- name: Put symlinks to middleware configuration scripts in /root
  file: src=/opt/scripts/{{ item.key }} dest=/root/{{ item.value }} group={{ app_deploy_user }} owner=root state=link force=true
  with_dict:
    "middleware-push-config.sh": "02-middleware-config.sh"
    "middleware-push-whitelist.sh": "04-middleware-whitelist.sh"
    "middleware-push-institution.sh": "05-middleware-institution.sh"

- name: Set stepup directory rights
  file: path={{ component_dir_name }} state=directory group={{ component_name }} mode=755

- name: Activate component
  file: src={{ component_dir_name }} dest=/opt/www/{{ middleware_vhost_name }} state=link


- name: Show database configuration hint
  debug:
    msg: "Note: Database initialisation/migration must be run manually once. Run '/root/01-middleware-db_migrate.sh' and '/root/01-gateway-db_migrate.sh' on an app server."

- name: Show middleware configuration hint
  debug:
    msg: "Note: The configuration of the middleware component using its REST interface must be performed manually. The (updated) configuration was written to the app servers, but is was not pushed to the middleware. Run '/root/02-middleware-config.sh', '/root/04-middleware-whitelist.sh' and '/root/05-middleware-institution.sh' on an app server."

- name: Show SRAA user bootstrap hint
  debug:
    msg: "Note: The first SRAA user(s) must be provisioned manually. Run '/root/06-middleware-bootstrap-sraa-users.sh' on an app server."
